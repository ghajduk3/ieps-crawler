local = {
  connectionPool = "HikariCP" //use HikariCP for our connection pool
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
  properties = {
    serverName = "localhost"
    portNumber = "5432"
    databaseName = "crawldb"
    user = "postgres"
    password = ""
  }
  search_path = "'$user',public,crawldb"
  numThreads = 200
}
logger.scala.slick = INFO
logger.scala.slick.session = INFO

net.sourceforge.htmlunit = INFO

thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 6.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 8
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
  #loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started;
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  # More fine grained log levels can be defined in the configuration of the SLF4J backend (e.g. logback.xml).
  loglevel = "INFO"

  # It will filter the log events using the backend configuration (e.g. logback.xml) before they are published to the event bus.
  #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  debug {
    # enable function of LoggingReceive, which is to log any received message at DEBUG level
    receive = on

    # enable DEBUG logging of actor lifecycle changes
    lifecycle = on
  }
}

akka.actor.mailbox.requirements {
  "akka.dispatch.BoundedMessageQueueSemantics" = fail-fast-bounded-mailbox
}

# Bounded mailbox which throws an exception if limit is reached.
fail-fast-bounded-mailbox {
  mailbox-type = "com.ieps.crawler.actors.BoundedPriorityMailbox$"
  mailbox-capacity = 10000
  mailbox-push-timeout-time = 10 ms
}